#!/usr/bin/env python

# NOTE: In order to make this cfg file usable it must be executable, so lets use the following command to make it excecutable
#       chmod +x Parameters.cfg

from dynamic_reconfigure.parameter_generator_catkin import *

PACKAGE = "ssf_package"
gen = ParameterGenerator()

# List of parameters
# gen.add("param_name", data_type, level, "Description of parameter", default_value,  min_value, max_value)
gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

size_enum = gen.enum([gen.const("Small",      int_t, 0, "A small constant"),
                      gen.const("Medium",     int_t, 1, "A medium constant"),
                      gen.const("Large",      int_t, 2, "A large constant"),
                      gen.const("ExtraLarge", int_t, 3, "An extra large constant")], "An enum to set size")

gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

# The second parameter is the name of a node this could run in (used to generate documentation only)
# The third parameter is a name prefix the generated files will get (e.g. "<name>Config.py" for python.
#  NOTE: The third parameter should be equal to the cfg file name, without extension. 
#        Otherwise the libraries will be generated in every build, forcing a recompilation of the nodes which use them.
file_name = "Parameters"
exit(gen.generate(PACKAGE, PACKAGE, file_name))